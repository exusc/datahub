{# Description of template language: https://docs.djangoproject.com/en/5.1/ref/templates/language/ #}
{% with app=area.application %}
-- RLS Script   : area.txt - Generates all RLS Information for an Area in PostGres 
-- Version      : 0.1
-- Generated at : {{time}} 
-- Application  : '{{app}}' ({{app.desc}})
-- Area         : '{{area.key}}' ({{area.desc}})
-- Database     : name   = '{{db_name}}'
--                host   = '{{db_host}}'
--                schema = '{{area.schematables}}'
--
-- https://www.postgresql.org/docs/current/sql-commands.html
-- ======================================================================================
-- In PostGres RLS is protected via Business Unit Types (BUT) and their values (BUV) 
-- defined in scopes. Therefore following artefacts are needed:
--    R1. A role to assign the policies
--    R2. RLS-Policies for each BUT on each table having a corrosponding column
--    R3. Each table must be enabled for RLS
--    R4. A function for each scope to set the values accordingly
-- --------------------------------------------------------------------------------------
-- In applikation '{{app}}' following BUTs are defined:
-- --------------------------------------------------------------------------------------
{% if app.bu1_type %}--    {{app.bu1_type}} (columns={{app.bu1_field}}) (envvar={{app|lower}}.{{app.bu1_field|lower}}){% endif %}{% if app.bu2_type %}
--    {{app.bu2_type}} (columns={{app.bu2_field}}) (envvar={{app|lower}}.{{app.bu2_field|lower}}){% endif %}{% if app.bu3_type %}--    {{app.bu3_type}} (columns={{app.bu3_field}}) (envvar={{app|lower}}.{{app.bu3_field|lower}}){% endif %}
-- ======================================================================================
-- R1. Create role for read access - used by report generator and direct access users
-- --------------------------------------------------------------------------------------
CREATE ROLE _{{area|lower}}_read_only;
-- ======================================================================================
-- R2. RLS-Policies for each BUT and each table
-- --------------------------------------------------------------------------------------
--    List of Policies:{% if app.bu1_type %}
--    For each table within schema '{{area.schematables}}' containing a column {{app.bu1_field}}:
-- --------------------------------------------------------------------------------------
CREATE POLICY _hub_{{app.bu1_field|lower}} ON {table} 
    AS PERMISSIVE FOR SELECT 
    TO _{{area|lower}}_read_only 
    USING (
      (current_setting('{{app|lower}}.{{app.bu1_field}}', false)::text = '*')
      or
      ({{app.bu1_field}}::text = current_setting('{{app|lower}}.{{app.bu1_field}}', false)::text)
);{% endif %}{% if app.bu2_type %}
-- --------------------------------------------------------------------------------------
--    For each table within schema '{{area.schematables}}' containing a column {{app.bu2_field}}:
-- --------------------------------------------------------------------------------------
CREATE POLICY _{{app.bu2_field|lower}} ON {table} 
    AS PERMISSIVE FOR SELECT 
    TO _{{area|lower}}_read_only 
    USING
      (current_setting('{{app|lower}}.{{app.bu2_field}}', false)::text = '*')
      or
      ({{app.bu2_field}}::text = current_setting('{{app|lower}}.{{app.bu2_field}}', false)::text)
);{% endif %}
-- ======================================================================================
-- R3. Enable RLS for each table which got a policy:
-- --------------------------------------------------------------------------------------
ALTER TABLE {table} ENABLE ROW LEVEL SECURITY;
-- ======================================================================================
-- R4. Functions to set values for the BUTs matching the scopes:
--     There are {{area.areascope_set.all|length}} scopes defined in area '{{area}}' of application '{{app}}'
--     This is just a test version setting the values of the BUTs. 
--     For productive usage the functions must check if user is allowed to use the scope {% for scope in area.areascope_set.all %} 
-- --------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION {{area.schematables}}.set_scope_{{scope.script_name}}() RETURNS void AS $$
BEGIN
    SET {{app|lower}}.{{app.bu1_field|lower}} = '{{scope.bu1_value}}';    {% if app.bu2_type %}
    SET {{app|lower}}.{{app.bu2_field|lower}} = '{{scope.bu2_value|default:'*'}}'; {% endif %}{% if app.bu3_type %}
    SET {{app|lower}}.{{app.bu3_field|lower}} = '{{scope.bu3_value|default:'*'}}'; {% endif %}
END;
$$ LANGUAGE plpgsql;{% endfor %}
--

CREATE OR REPLACE FUNCTION {{area.schematables}}.set_scope(string) RETURNS integer AS $$
BEGIN
    select from table and assing values
    SET {{app|lower}}.{{app.bu1_field|lower}} = '{{scope.bu1_value}}';    {% if app.bu2_type %}
    SET {{app|lower}}.{{app.bu2_field|lower}} = '{{scope.bu2_value|default:'*'}}'; {% endif %}{% if app.bu3_type %}
    SET {{app|lower}}.{{app.bu3_field|lower}} = '{{scope.bu3_value|default:'*'}}'; {% endif %}END;
$$ LANGUAGE plpgsql;

-- ======================================================================================
-- Direct Access to Database
--   D1. User must be defined as role in DB 
--   D2. Information about who is allowed to use which scope
--   D3. Installed Login Hook
--   D4. Information about last used scope of user 
--   D5. Login Hook must set last scope
-- ======================================================================================
-- D1. Create role for direct access 
-- --------------------------------------------------------------------------------------
CREATE ROLE {userid} 
    WITH LOGIN PASSWORD 'wie_machen$wir_das?'
    IN ROLE _{{area|lower}}_read_only;
-- ======================================================================================
-- D2. Who is allowed to use which scope?
CREATE TABLE {{area.schematables}}._user2scope (
    user VARCHAR(255),
    scope VARCHAR(255)
);
-- Load table with values
-- for (user,scope) in assinged scopes for area '{{area}}'
INSERT ({userid},{scope}) IN  {{area.schematables}}._user2scope;
-- ======================================================================================
-- End of Script
-- ======================================================================================

-- Comments Uli
-- ======================================================================================
To be checked
- Syntax and naming conventions
- Not sure if policy names must be different from table names
- Check explain if *-notation and or in policy is a performant implementation
- Does it work with distributed tables within citus?
- What happens if column in rule dosn't exist?
- If we have two rules does it work like expected: connacted as an AND?
- What happens if a envvar is not defined?
- Min and max values are needed for Schutzstufen at igs
- Type is needed
- In productive script each object must hae information about genertaion time, ...
- Performance (use explain)
- Check with distributed table - see test case below
-- ======================================================================================
Sample PlSql - to be testet because of local usage in explain
https://github.com/citusdata/citus/issues/7415
create extension citus;
-- Create the test user
CREATE ROLE myuser WITH LOGIN PASSWORD 'ciao';
-- Create the table
CREATE TABLE products (
    id SERIAL,
    tenant_id INT,
    name VARCHAR(255)
);
-- Insert data
INSERT INTO products (tenant_id, name)
VALUES (1, 'Product A1'),
    (1, 'Product A2'),
    (2, 'Product B1'),
    (2, 'Product B2');
-- Distribute the table
select create_distributed_table('products', 'tenant_id');
-- Add privileges to test user
GRANT ALL PRIVILEGES ON "products" to myuser;
-- Create the policy
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
CREATE POLICY tenant_isolation_policy ON products FOR ALL TO myuser USING (
    tenant_id = current_setting('app.tenant_id', false)::integer
);

BEGIN;
set citus.propagate_set_commands = 'local';
set local app.tenant_id = '1';
SELECT * FROM "products";
EXPLAIN ANALYZE SELECT * FROM "products";
-- ======================================================================================

{% endwith %}
